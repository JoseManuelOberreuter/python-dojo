# Test rÃ¡pido de Python #17
# -----------------------------------------------
# Â¿CuÃ¡l es el resultado de este cÃ³digo?

# CÃ³digo:
print(all([True, 1, ""]))

# Opciones:
# A) True
# B) False
# C) Error



# ðŸ‘‡ðŸ‘‡ðŸ‘‡ SPOILER: no sigas bajando si no quieres ver la respuesta ðŸ‘‡ðŸ‘‡ðŸ‘‡

































































































































"""
Respuesta correcta: B) False

ExplicaciÃ³n:
La funciÃ³n `all()` recibe un iterable (como una lista o tupla) y devuelve `True` 
solo si todos los elementos del iterable son verdaderos. 
Si alguno es considerado falso, devuelve `False`.

En este caso evaluamos:

    all([True, 1, ""])

Desglosemos los valores:

- `True` â†’ verdadero
- `1` â†’ verdadero (en Python, cualquier nÃºmero distinto de cero es `True`)
- `""` â†’ falso (un string vacÃ­o es considerado `False`)

Como hay un valor falsy (`""`), el resultado de `all()` serÃ¡ `False`.

Recordemos que en Python se consideran `False` los siguientes valores:

- `0`
- `0.0`
- `None`
- `""` (string vacÃ­o)
- `[]` (lista vacÃ­a)
- `{}` (diccionario vacÃ­o)
- `set()` (conjunto vacÃ­o)
- cualquier objeto personalizado con `__bool__()` o `__len__()` que devuelva `False` o `0`

Todo lo demÃ¡s es `True`.

Ejemplos adicionales:

    all([1, 2, 3])         â†’ True
    all([1, 0, 3])         â†’ False
    all([])               â†’ True (porque no hay elementos falsos)
    all(["texto", ""])    â†’ False

Consejo prÃ¡ctico:
`all()` es Ãºtil para verificar si todos los elementos cumplen una condiciÃ³n, por ejemplo:

    all(x > 0 for x in [1, 2, 3]) â†’ True
    all(x > 0 for x in [0, 2, 3]) â†’ False

En contraste, si quieres saber si al menos uno es verdadero, puedes usar `any()`:

    any([False, False, True]) â†’ True
"""
